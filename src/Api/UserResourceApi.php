<?php
/**
 * UserResourceApi
 * PHP version 8.1
 *
 * @package  kruegge82\DPIM
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post INTERNETMARKE API
 *
 * Division: Post & Parcel Germany<br /> The INTERNETMARKE is the online-postage for mail products of Deutsche Post AG.
 *
 * The version of the OpenAPI document: 1.26
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\DPIM\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use kruegge82\DPIM\ApiException;
use kruegge82\DPIM\Configuration;
use kruegge82\DPIM\HeaderSelector;
use kruegge82\DPIM\ObjectSerializer;

/**
 * UserResourceApi Class Doc Comment
 *
 * @package  kruegge82\DPIM
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserResourceApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'authorization' => [
            'application/x-www-form-urlencoded',
        ],
        'retrieveUserData' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation authorization
     *
     * Get authorization token.
     *
     * @param  string $grant_type OAuth2 standard content, must be set to &#39;client_credentials&#39; (required)
     * @param  string $username Internetmarke user name (e.g. &#39;franz.klammer&#39;). (required)
     * @param  string $password Internetmarke password (e.g. &#39;abfahrt123#&#39;) (required)
     * @param  string $client_id API client_id obtained from developer portal (e.g. &#39;XjSnyVWgQp1ShIQ5HQ6Vq5PIYLN2jGNS&#39;) (required)
     * @param  string $client_secret API client_secret obtained from developer portal (e.g. &#39;TICgJWGRysH7mA57&#39;) (required)
     * @param  bool|null $for_payment Flag to indicate the authorization for payment use case. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorization'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \kruegge82\DPIM\Model\Authentication200Response|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response
     */
    public function authorization(
        string $grant_type,
        string $username,
        string $password,
        string $client_id,
        string $client_secret,
        ?bool $for_payment = false,
        string $contentType = self::contentTypes['authorization'][0]
    ): \kruegge82\DPIM\Model\Authentication200Response|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response
    {
        list($response) = $this->authorizationWithHttpInfo($grant_type, $username, $password, $client_id, $client_secret, $for_payment, $contentType);
        return $response;
    }

    /**
     * Operation authorizationWithHttpInfo
     *
     * Get authorization token.
     *
     * @param  string $grant_type OAuth2 standard content, must be set to &#39;client_credentials&#39; (required)
     * @param  string $username Internetmarke user name (e.g. &#39;franz.klammer&#39;). (required)
     * @param  string $password Internetmarke password (e.g. &#39;abfahrt123#&#39;) (required)
     * @param  string $client_id API client_id obtained from developer portal (e.g. &#39;XjSnyVWgQp1ShIQ5HQ6Vq5PIYLN2jGNS&#39;) (required)
     * @param  string $client_secret API client_secret obtained from developer portal (e.g. &#39;TICgJWGRysH7mA57&#39;) (required)
     * @param  bool|null $for_payment Flag to indicate the authorization for payment use case. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorization'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \kruegge82\DPIM\Model\Authentication200Response|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response|\kruegge82\DPIM\Model\RequestStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationWithHttpInfo(
        string $grant_type,
        string $username,
        string $password,
        string $client_id,
        string $client_secret,
        ?bool $for_payment = false,
        string $contentType = self::contentTypes['authorization'][0]
    ): array
    {
        $request = $this->authorizationRequest($grant_type, $username, $password, $client_id, $client_secret, $for_payment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\kruegge82\DPIM\Model\Authentication200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\Authentication200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\Authentication200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\kruegge82\DPIM\Model\RequestStatus', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\RequestStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\RequestStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\kruegge82\DPIM\Model\Error401Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\Error401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\Error401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\kruegge82\DPIM\Model\Error429Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\Error429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\Error429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if (in_array('\kruegge82\DPIM\Model\RequestStatus', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\RequestStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\RequestStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\kruegge82\DPIM\Model\Authentication200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\Authentication200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\RequestStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\Error401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\Error429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\RequestStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationAsync
     *
     * Get authorization token.
     *
     * @param  string $grant_type OAuth2 standard content, must be set to &#39;client_credentials&#39; (required)
     * @param  string $username Internetmarke user name (e.g. &#39;franz.klammer&#39;). (required)
     * @param  string $password Internetmarke password (e.g. &#39;abfahrt123#&#39;) (required)
     * @param  string $client_id API client_id obtained from developer portal (e.g. &#39;XjSnyVWgQp1ShIQ5HQ6Vq5PIYLN2jGNS&#39;) (required)
     * @param  string $client_secret API client_secret obtained from developer portal (e.g. &#39;TICgJWGRysH7mA57&#39;) (required)
     * @param  bool|null $for_payment Flag to indicate the authorization for payment use case. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorization'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function authorizationAsync(
        string $grant_type,
        string $username,
        string $password,
        string $client_id,
        string $client_secret,
        ?bool $for_payment = false,
        string $contentType = self::contentTypes['authorization'][0]
    ): PromiseInterface
    {
        return $this->authorizationAsyncWithHttpInfo($grant_type, $username, $password, $client_id, $client_secret, $for_payment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizationAsyncWithHttpInfo
     *
     * Get authorization token.
     *
     * @param  string $grant_type OAuth2 standard content, must be set to &#39;client_credentials&#39; (required)
     * @param  string $username Internetmarke user name (e.g. &#39;franz.klammer&#39;). (required)
     * @param  string $password Internetmarke password (e.g. &#39;abfahrt123#&#39;) (required)
     * @param  string $client_id API client_id obtained from developer portal (e.g. &#39;XjSnyVWgQp1ShIQ5HQ6Vq5PIYLN2jGNS&#39;) (required)
     * @param  string $client_secret API client_secret obtained from developer portal (e.g. &#39;TICgJWGRysH7mA57&#39;) (required)
     * @param  bool|null $for_payment Flag to indicate the authorization for payment use case. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorization'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function authorizationAsyncWithHttpInfo(
        string $grant_type,
        string $username,
        string $password,
        string $client_id,
        string $client_secret,
        ?bool $for_payment = false,
        string $contentType = self::contentTypes['authorization'][0]
    ): PromiseInterface
    {
        $returnType = '\kruegge82\DPIM\Model\Authentication200Response';
        $request = $this->authorizationRequest($grant_type, $username, $password, $client_id, $client_secret, $for_payment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorization'
     *
     * @param  string $grant_type OAuth2 standard content, must be set to &#39;client_credentials&#39; (required)
     * @param  string $username Internetmarke user name (e.g. &#39;franz.klammer&#39;). (required)
     * @param  string $password Internetmarke password (e.g. &#39;abfahrt123#&#39;) (required)
     * @param  string $client_id API client_id obtained from developer portal (e.g. &#39;XjSnyVWgQp1ShIQ5HQ6Vq5PIYLN2jGNS&#39;) (required)
     * @param  string $client_secret API client_secret obtained from developer portal (e.g. &#39;TICgJWGRysH7mA57&#39;) (required)
     * @param  bool|null $for_payment Flag to indicate the authorization for payment use case. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authorization'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authorizationRequest(
        string $grant_type,
        string $username,
        string $password,
        string $client_id,
        string $client_secret,
        ?bool $for_payment = false,
        string $contentType = self::contentTypes['authorization'][0]
    ): Request
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $grant_type when calling authorization'
            );
        }

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $username when calling authorization'
            );
        }

        // verify the required parameter 'password' is set
        if ($password === null || (is_array($password) && count($password) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $password when calling authorization'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $client_id when calling authorization'
            );
        }

        // verify the required parameter 'client_secret' is set
        if ($client_secret === null || (is_array($client_secret) && count($client_secret) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $client_secret when calling authorization'
            );
        }



        $resourcePath = '/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $for_payment,
            'forPayment', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveUserData
     *
     * Authenticate and retrieve authorized user&#39;s data for shop.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveUserData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \kruegge82\DPIM\Model\RetrieveUserDataResponse|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response
     */
    public function retrieveUserData(
        string $contentType = self::contentTypes['retrieveUserData'][0]
    ): \kruegge82\DPIM\Model\RetrieveUserDataResponse|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response
    {
        list($response) = $this->retrieveUserDataWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation retrieveUserDataWithHttpInfo
     *
     * Authenticate and retrieve authorized user&#39;s data for shop.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveUserData'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \kruegge82\DPIM\Model\RetrieveUserDataResponse|\kruegge82\DPIM\Model\RequestStatus|\kruegge82\DPIM\Model\Error401Response|\kruegge82\DPIM\Model\Error429Response|\kruegge82\DPIM\Model\RequestStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveUserDataWithHttpInfo(
        string $contentType = self::contentTypes['retrieveUserData'][0]
    ): array
    {
        $request = $this->retrieveUserDataRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\kruegge82\DPIM\Model\RetrieveUserDataResponse', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\RetrieveUserDataResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\RetrieveUserDataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\kruegge82\DPIM\Model\RequestStatus', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\RequestStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\RequestStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\kruegge82\DPIM\Model\Error401Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\Error401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\Error401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\kruegge82\DPIM\Model\Error429Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\Error429Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\Error429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if (in_array('\kruegge82\DPIM\Model\RequestStatus', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\kruegge82\DPIM\Model\RequestStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\kruegge82\DPIM\Model\RequestStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\kruegge82\DPIM\Model\RetrieveUserDataResponse';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\RetrieveUserDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\RequestStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\Error401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\Error429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\kruegge82\DPIM\Model\RequestStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveUserDataAsync
     *
     * Authenticate and retrieve authorized user&#39;s data for shop.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveUserData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function retrieveUserDataAsync(
        string $contentType = self::contentTypes['retrieveUserData'][0]
    ): PromiseInterface
    {
        return $this->retrieveUserDataAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveUserDataAsyncWithHttpInfo
     *
     * Authenticate and retrieve authorized user&#39;s data for shop.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveUserData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function retrieveUserDataAsyncWithHttpInfo(
        string $contentType = self::contentTypes['retrieveUserData'][0]
    ): PromiseInterface
    {
        $returnType = '\kruegge82\DPIM\Model\RetrieveUserDataResponse';
        $request = $this->retrieveUserDataRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveUserData'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveUserData'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveUserDataRequest(
        string $contentType = self::contentTypes['retrieveUserData'][0]
    ): Request
    {


        $resourcePath = '/user/profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
