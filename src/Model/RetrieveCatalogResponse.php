<?php
/**
 * RetrieveCatalogResponse
 *
 * PHP version 8.1
 *
 * @package  kruegge82\DPIM
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Deutsche Post INTERNETMARKE API
 *
 * Division: Post & Parcel Germany<br /> The INTERNETMARKE is the online-postage for mail products of Deutsche Post AG.
 *
 * The version of the OpenAPI document: 1.26
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\DPIM\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use kruegge82\DPIM\ObjectSerializer;

/**
 * RetrieveCatalogResponse Class Doc Comment
 *
 * @description Response object for the retrieved Catalogs.
 * @package  kruegge82\DPIM
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class RetrieveCatalogResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RetrieveCatalogResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'private_catalog' => '\kruegge82\DPIM\Model\PrivateCatalog',
        'public_catalog' => '\kruegge82\DPIM\Model\PublicCatalog',
        'page_formats' => '\kruegge82\DPIM\Model\PageFormat[]',
        'contract_products' => '\kruegge82\DPIM\Model\ContractProducts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'private_catalog' => null,
        'public_catalog' => null,
        'page_formats' => null,
        'contract_products' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'private_catalog' => false,
        'public_catalog' => false,
        'page_formats' => false,
        'contract_products' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'private_catalog' => 'privateCatalog',
        'public_catalog' => 'publicCatalog',
        'page_formats' => 'pageFormats',
        'contract_products' => 'contractProducts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'private_catalog' => 'setPrivateCatalog',
        'public_catalog' => 'setPublicCatalog',
        'page_formats' => 'setPageFormats',
        'contract_products' => 'setContractProducts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'private_catalog' => 'getPrivateCatalog',
        'public_catalog' => 'getPublicCatalog',
        'page_formats' => 'getPageFormats',
        'contract_products' => 'getContractProducts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('private_catalog', $data ?? [], null);
        $this->setIfExists('public_catalog', $data ?? [], null);
        $this->setIfExists('page_formats', $data ?? [], null);
        $this->setIfExists('contract_products', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets private_catalog
     *
     * @return \kruegge82\DPIM\Model\PrivateCatalog|null
     */
    public function getPrivateCatalog(): ?\kruegge82\DPIM\Model\PrivateCatalog
    {
        return $this->container['private_catalog'];
    }

    /**
     * Sets private_catalog
     *
     * @param \kruegge82\DPIM\Model\PrivateCatalog|null $private_catalog private_catalog
     *
     * @return $this
     */
    public function setPrivateCatalog(?\kruegge82\DPIM\Model\PrivateCatalog $private_catalog): static
    {
        if (is_null($private_catalog)) {
            throw new InvalidArgumentException('non-nullable private_catalog cannot be null');
        }
        $this->container['private_catalog'] = $private_catalog;

        return $this;
    }

    /**
     * Gets public_catalog
     *
     * @return \kruegge82\DPIM\Model\PublicCatalog|null
     */
    public function getPublicCatalog(): ?\kruegge82\DPIM\Model\PublicCatalog
    {
        return $this->container['public_catalog'];
    }

    /**
     * Sets public_catalog
     *
     * @param \kruegge82\DPIM\Model\PublicCatalog|null $public_catalog public_catalog
     *
     * @return $this
     */
    public function setPublicCatalog(?\kruegge82\DPIM\Model\PublicCatalog $public_catalog): static
    {
        if (is_null($public_catalog)) {
            throw new InvalidArgumentException('non-nullable public_catalog cannot be null');
        }
        $this->container['public_catalog'] = $public_catalog;

        return $this;
    }

    /**
     * Gets page_formats
     *
     * @return \kruegge82\DPIM\Model\PageFormat[]|null
     */
    public function getPageFormats(): ?array
    {
        return $this->container['page_formats'];
    }

    /**
     * Sets page_formats
     *
     * @param \kruegge82\DPIM\Model\PageFormat[]|null $page_formats The container of page formats.
     *
     * @return $this
     */
    public function setPageFormats(?array $page_formats): static
    {
        if (is_null($page_formats)) {
            throw new InvalidArgumentException('non-nullable page_formats cannot be null');
        }
        $this->container['page_formats'] = $page_formats;

        return $this;
    }

    /**
     * Gets contract_products
     *
     * @return \kruegge82\DPIM\Model\ContractProducts|null
     */
    public function getContractProducts(): ?\kruegge82\DPIM\Model\ContractProducts
    {
        return $this->container['contract_products'];
    }

    /**
     * Sets contract_products
     *
     * @param \kruegge82\DPIM\Model\ContractProducts|null $contract_products contract_products
     *
     * @return $this
     */
    public function setContractProducts(?\kruegge82\DPIM\Model\ContractProducts $contract_products): static
    {
        if (is_null($contract_products)) {
            throw new InvalidArgumentException('non-nullable contract_products cannot be null');
        }
        $this->container['contract_products'] = $contract_products;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


